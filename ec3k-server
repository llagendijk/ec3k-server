#!/usr/bin/python
import signal
import time
import sys
import threading
import Queue
import argparse
import configparser
import traceback
import logging
import ec3k_srv.inputs.RemoteClient as RemoteClient
import ec3k_srv.inputs.Ec3kReceiver as Ec3kReceiver
import ec3k_srv.outputs.TcpOutputSocket as TcpOutputSocket
import ec3k_srv.outputs.MqttOutput as MqttOutput

wantStop = False
logger = None


class LocalError(Exception):
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return self.message


def handler(signum, frame):
    global wantStop
    global logger
    wantStop = True
    if logger:
        logger.info("Signal %d caught! Stopping..." % (signum, ))
    else:
        logging.info("Signal %d caught! Stopping..." % (signum, ))


def addLoggingLevel(levelName, levelNum, methodName=None):
    """
    Adds a new logging level to the `logging` module and the
    currently configured logging class.

    `levelName` becomes an attribute of the `logging` module with the value
    `levelNum`. `methodName` becomes a convenience method for both `logging`
    itself and the class returned by `logging.getLoggerClass()` (usually just
    `logging.Logger`). If `methodName` is not specified, `levelName.lower()` is
    used.

    To avoid accidental clobberings of existing attributes, this method will
    raise an `AttributeError` if the level name is already an attribute of the
    `logging` module or if the method name is already present 

    """
    if not methodName:
        methodName = levelName.lower()

    if hasattr(logging, levelName):
        raise AttributeError(
            '{} already defined in logging module'.format(levelName))

    if hasattr(logging, methodName):
        raise AttributeError(
            '{} already defined in logging module'.format(methodName))

    if hasattr(logging.getLoggerClass(), methodName):
        raise AttributeError(
            '{} already defined in logger class'.format(methodName))

    # This method was inspired by the answers to Stack Overflow post
    # http://stackoverflow.com/q/2183233/2988730, especially
    # http://stackoverflow.com/a/13638084/2988730
    def logForLevel(self, message, *args, **kwargs):
        if self.isEnabledFor(levelNum):
            self._log(levelNum, message, args, **kwargs)

    def logToRoot(message, *args, **kwargs):
        logging.log(levelNum, message, *args, **kwargs)

    logging.addLevelName(levelNum, levelName)
    setattr(logging, levelName, levelNum)
    setattr(logging.getLoggerClass(), methodName, logForLevel)
    setattr(logging, methodName, logToRoot)


def main():
    queues = []
    startedInputs = []
    startedOutputs = []

    def callback(string):
        for q in queues:
            q.put(string)

    def errorCallback(name, string):
        global wantStop
        global logger
        logger.error("Error in {}: {}".format(name, string))
        wantStop = True

    def cleanupAndExit(retVal):
        for i in startedInputs:
            i.stop()

        for o in startedOutputs:
            o.stop()

        for q in queues:
            q.join()

        sys.exit(retVal)

    global wantStop
    global logger

    signal.signal(signal.SIGTERM, handler)
    signal.signal(signal.SIGINT, handler)

    cmd_line = argparse.ArgumentParser(description='Ec3k json server.')

    cmd_line.add_argument('-c',
                          '--configfile',
                          type=str,
                          default='/etc/ec3k-server.conf',
                          help="override default configfile (/etc/ec3k-server.conf)")
    args = cmd_line.parse_args()

    config = configparser.ConfigParser()
    try:
        with open(args.configfile) as f:
            config.readfp(f)
    except IOError:
        logging.error("Cannot open configfile: " + args.configfile)
        sys.exit(1)

    try:
        addLoggingLevel("DETAILED", 9)

        main = config["main"]

        loglevel = main["loglevel"]
        numeric_level = getattr(logging, loglevel.upper(), None)
        if not isinstance(numeric_level, int):
            logging.error(
                "Invalid log level: '{}' in section 'main'".format(loglevel))
            sys.exit(2)

        logTime = main.getboolean("log-time")
        if logTime:
            logFormat = '%(asctime)s %(name)s.%(levelname)s %(message)s'
        else:
            logFormat = '%(name)s.%(levelname)s %(message)s'

        logging.basicConfig(level=numeric_level, format=logFormat)

        logger = logging.getLogger("ec3k-server")
        logger.info("Starting, using  configfile: " + args.configfile)

    except Exception as e:
        logging.error(traceback.format_exc())
        sys.exit(2)

    try:
        logger.debug("start output modules")
        outputs = main["outputs"].split()

        for outp in outputs:
            logger.debug("Start output moodule {}".format(outp))
            section = outp
            outpConfig = config[outp]
            queue = Queue.Queue()
            type = outpConfig["output-type"]

            if type == "TCPsocket":
                outputTcpSocket = TcpOutputSocket.TcpOutputSocket(
                    "ec3k-server." + outp, queue, outpConfig, errorCallback)
                startedOutputs.append(outputTcpSocket)
                queues.append(queue)
                outputTcpSocket.start()

            elif type == "mqtt":
                outputMqtt = MqttOutput.MqttOutput("ec3k-server." + outp,
                                                   queue, outpConfig,
                                                   errorCallback)
                startedOutputs.append(outputMqtt)
                queues.append(queue)
                outputMqtt.start()

            else:
                EC3kUtils.LocalError(
                    "Unknown output type: {} in section {}".format(
                        type, section))

        logger.debug("Start input modules")
        inputs = main["inputs"].split()

        for inp in inputs:
            logger.debug("Start input module {}".format(inp))
            section = inp
            inpConfig = config[inp]
            type = inpConfig["input-type"]

            if type == "ec3k":
                ec3kWrapper = Ec3kReceiver.Ec3kReceiver(
                    "ec3k-server." + inp, callback, inpConfig, errorCallback)
                ec3kWrapper.start()
                startedInputs.append(ec3kWrapper)

            elif type == "remote":
                remoteClient = RemoteClient.RemoteClient(
                    "ec3k-server." + inp, callback, inpConfig, errorCallback)
                remoteClient.start()
                startedInputs.append(remoteClient)

            else:
                EC3kUtils.LocalError(
                    "Unknown input type: {} in section {}".format(
                        type, section))

        logger.debug("All configured modules are now started")

    except (KeyError) as e:
        logger.error(
            "Error parsing configuration file {} {} in section {}".format(
                args.configfile, e, section))
        cleanupAndExit(1)

    except (configparser.Error) as e:
        logger.error(
            "Error parsing configuration file {}: {} in section {}".format(
                args.configfile, e, section))
        cleanupAndExit(1)

    except LocalError as e:
        logger.error("Processing error: {}".format(e))
        cleanupAndExit(1)

    except Exception as e:
        logger.error(traceback.format_exc())
        cleanupAndExit(2)

    # Main loop
    try:
        while not wantStop:
            time.sleep(1)
    except Exception as e:
        self.logger.error("Caught excaption in main loop: {}".format(e))
        cleanupAndExit(2)
    cleanupAndExit(0)


if __name__ == '__main__':
    main()
